In order to create tests, the following steps must be taken:

1. Create the lesson#.html file inside of the views folder. Any of the current lessons can be used as a template, only the Lesson # header, lesson title and lesson content need to be changed.
2. In the lesson_modules folder, create a lesson#_tests.c for the desired lesson. Any of the previous lesson#_tests.c files can be used as a template. The number of tests must be predefined, and number of test cases should not exceed 8. lesson1_tests.c can be done using any method, however the C file should print an 8-bit number, where each bit is a failed test (255 means 8 failed tests, 0 means all tests passed).
3. In main.js, the lessonTests array should be updated to contain the number of tests contained in a lesson. The first element is for lesson 1, second element for test 2, and so on.
4. In main.js, the createCFile function must be updated to have a case for the new test. Each case in the switch statement must define the test file to be used for the tests. Each case should correspond to the lesson # being added.
5. Finally, getFailedDesc contains a switch statement on the currentLesson variable (this variable may be pulled from a user's cookie or from their user progress file). Each case in this upper-level switch statement corresponds to the current lesson, so add a case #: for the lesson being added. Other cases may be used as a template, the important pieces to reuse are the for loop over 8 numbers [1, 8] in interval notation, integers. Inside of the for loop, run a switch statement on each i value, where each case is the specific test from the lesson#_tests.c file. It is important to note that the value 0000 0010 in base 2, or 2 in decimal, corresponds to only test 2 failing. Due to this, case 1 should correspond to the right-most bit, and so on until the 8th bit. Previous cases should be used as a template for a test passing or failing.